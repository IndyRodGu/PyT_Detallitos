Service:

async getItemDetails(id) {
    if (!mongoose.isValidObjectId(id)) return null;

    const [doc] = await Item.aggregate([
      { $match: { _id: new mongoose.Types.ObjectId(id) } },
      {
        $lookup: {
          from: 'Cliente',
          localField: 'clienteId',
          foreignField: '_id',
          as: 'cliente'
        }
      },
      { $unwind: '$cliente' },
      {
        $lookup: {
          from: 'Producto',
          localField: 'productoId',
          foreignField: '_id',
          as: 'producto'
        }
      },
      { $unwind: '$producto' }
    ]);

    return doc || null;
  }
  
  Controller:
  
    async getItemDetails(req, res) {
    try {
      const item = await itemService.getItemDetails(req.params.id);
      if (!item) return res.status(404).json({ error: 'Item not found' });
      res.json(item);
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  }
  
  Routes:
  
  router.get('/items/details/:id', itemController.getItemDetails);